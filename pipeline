pipeline {
    agent any

    environment {
        IMAGE_NAME = 'employee-management-system'
        DOCKER_REGISTRY = 'mahsabdad' // Replace with your Docker Hub username
        DOCKER_CREDENTIALS_ID = 'mahsabdad' // Replace with Jenkins credentials ID
    }

    stages {
        stage('Checkout') {
            steps {
                // Clone the repository
                git branch: 'main', url: 'https://github.com/masabdad/Employee_Management'
            }
        }

        stage('Build with Maven') {
            steps {
                // Build the application using Maven
                sh 'mvn clean install -DskipTests'
            }
        }

        stage('Build Docker Image') {
            steps {
                // Build a Docker image for the application
                sh """
                docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest .
                """
            }
        }

        stage('Run Tests in Docker Container') {
            steps {
                // Run the application in a container for testing
                sh """
                docker run --rm -d --name test-container -p 8081:8081 ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                sleep 10  # Wait for the app to start
                curl -f http://localhost:8081/actuator/health || exit 1
                docker stop test-container
                """
            }
        }

        stage('Push Docker Image') {
            steps {
                // Login to Docker Hub and push the image
                withDockerRegistry(credentialsId: "${DOCKER_CREDENTIALS_ID}") {
                    sh """
                    docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                    """
                }
            }
        }

        stage('Deploy (Optional)') {
            steps {
                // Example deployment step (adjust to your environment)
                sh """
                echo "Deploying the Docker container..."
                docker run -d --name employee-management -p 8081:8081 ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                """
            }
        }
    }

    post {
        always {
            // Clean up workspace
            cleanWs()
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
